serializer.py
-------------
from django.contrib.auth import get_user_model
from rest_framework.serializers import ModelSerializer,EmailField,CharField,ValidationError
from django.contrib.contenttypes.models import ContentType
from django.db.models import Q

User = get_user_model()

class UserCreateSerializer(ModelSerializer):
	email = EmailField(label='Email Address')
	email2 = EmailField(label='Confirm Email')
	class Meta:
		model = User
		fields = [
			'username',
			'email',
			'email2',
			'password',

		]
		extra_kwargs = {'password': 
							{'write_only': True}
						}

	def validate(self, data):
		# email = data['email']
		# user_qs = User.objects.filter(email=email)
		# if user_qs.exists():
		# 	raise ValidationError('This Email has Already Registered.')
		return data

	def validate_email(self, value):
		data = self.get_initial()
		email1 = data.get('email2')
		email2 = value
		if email1 != email2:
			raise ValidationError('Email must match')

		user_email = User.objects.filter(email=email2)
		if user_email.exists():
			raise ValidationError('This Email has Already Registered.')

		return value


	def validate_email2(self, value):
		data = self.get_initial()
		email1 = data.get('email')
		email2 = value
		if email1 != email2:
			raise ValidationError('Email must match')
		return value

	def create(self, validated_data):
		username = validated_data['username']
		email = validated_data['email']
		password = validated_data['password']
		user_obj = User(
			username = username,
			email = email,
			)
		user_obj.set_password(password)  
		user_obj.save()

		return validated_data

class UserLoginSerializer(ModelSerializer):
	token = CharField(allow_blank=True, read_only=True)
	username = CharField(required=False, allow_blank=True)
	email = EmailField(label='Email Address')
	class Meta: 
		model = User
		fields = [
			'username',
			'email',
			'password',
			'token',
		]
		
		extra_kwargs = {'password': 
							{'write_only': True}
						}
	def validate(self, data):
		user_obj = None
		email = data.get('email',None)
		username = data.get('username',None)
		password = data['password']

		if not email and not username:
			raise ValidationError('A username or email is required to login.')

		user = User.objects.filter(
			Q(email=email)|
			Q(username=username)
			).distinct()
		user = user.exclude(email__isnull = True).exclude(email__iexact='')
		if user.exists() and user.count() == 1:
			user_obj = user.first()
		else:
			raise ValidationError('This username/email is not valid.')
		
		if user_obj:
			if not user_obj.check_password(password):
				raise ValidationError('Incorrect credentials please try again.')
		
		data['token'] = 'Some Random Token' 
		return data 

class UserDetailSerializer(ModelSerializer):
	class Meta:
		models = User
		fields = [
			'username',
			'email',
		]

___________________________________
Create_Restful_API_blog_Details
_______________________________

Create a RESTFUL API service for the blog i created Django Blog Api 

2- Getting Started

3 - API Module & ListAPIView

4 - Serialize Model Data into JSON

5 - Serializing Objects in the Python Shell

6 - Retrieve API View aka Detail View

7 - Update & Destroy (Delete) API View

8 - Update & Delete in the Python Shell

9 - Create Serializer and Create API View

10 - Associate User with View Methods

11 - Custom Permissions

12 - Filtering a Queryset in a ListAPIView

13 - Pagination with Rest Framework

14 - Hyperlinked Identity Field for URL

15 - Serializer Method Field

16 - Comments API

17 - Comment Children & Reply Count

18 - Comments in Post Detail API View

19 - Comment Create Serializer Function Part 1

20 - Comment Create Serializer Function Part 2

21 - Comment Create Serializer Function Part 3

22 - Update & Destory Mixins

23 - Comment Detail, Update, & Delete

24 - Comment URLs & Post Get API Urls

25 - User API Setup

26 - ModelSerializer Create Method

27 - Serializer Validation

28 - Base APIView for User Login

29 - UserLogin API Validation

30 - User Detail Serializer

31 - Django Rest Framework Settings

32 - Django Rest Framework JWT & Curl Tests


_____________________________
import_json.txt
___________________________

>> import json
>> from blog.models import Post
>> with open('posts.json') as f:
  	  ...:     posts_json =json.load(f)

>> for post in posts_json:
	  ...:     post = Post(title=post['title'], content=post['content'], author_id=post['user_id'])
	  ...:     post.save()

Note: If Error Accord ()

______________________________
setting.py
__________________________

"""
Django settings for django_blog_api project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SITE_ROOT = os.path.dirname(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%1k*=$a9g(f4xo(pugrfv^=z+8lc+%)+g=nhda!n*n7!(5o4*q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'users',
    'crispy_forms',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_blog_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                os.path.join(SITE_ROOT,'django_blog_api','templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_blog_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'
LOGIN_REDIRECT_URL = 'blog-home'
LOGIN_URL = 'login'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    # 'DEFAULT_PARSER_CLASSES': [
    #     'rest_framework.parsers.JSONParser',
    # ]
    'DEFAULT_AUTHENTICATION_CLASSES':[
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',   
    ],
    'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ]
}


_______________________
urls.py
_____________________

"""django_blog_api URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf.urls import url
from django.contrib.auth import views as auth_views
from users import views as user_views
from django.conf import settings
from django.conf.urls.static import static
from rest_framework_jwt.views import obtain_jwt_token


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name='register'),
    path('profile/', user_views.profile, name='profile'),	
    path('login/', auth_views.LoginView.as_view(template_name= 'login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(template_name= 'logout.html'), name='logout'),
    path('password-reset/', auth_views.PasswordResetView.as_view(template_name= 'password_reset.html'), name='password_reset'),
    path('password-reset/done/', auth_views.PasswordResetDoneView.as_view(template_name= 'password_reset_done.html'), name='password_reset_done'),
    path('password-reset-confirm/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name= 'password_reset_confirm.html'), name='password_reset_confirm'),
    path('password-reset/complete/', auth_views.PasswordResetCompleteView.as_view(template_name= 'password_reset_complete.html'), name='password_reset_complete'),
    path('', include('blog.urls')),
    url(r'^api/users/', include(('users.api.urls','users-api'), namespace='users-api')),
    url(r'^api/posts/', include(('blog.api.urls','posts-api'), namespace='posts-api')),
    url(r'^api/auth/token/', obtain_jwt_token),
]

if settings.DEBUG:
	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# $ curl -H "Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxNCwidXNlcm5hbWUiOiJzaG9haWI0NCIsImV4cCI6MTU4NjUwMTA2NSwiZW1haWwiOiJzaG9haWI0NEBnbWFpbC5jb20ifQ.5KjTDYhy7EYVZkY73funRZvtzS52tmPxLEo7Nxknuy8" http://localhost:8000/api/posts/
# {"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxNCw
# idXNlcm5hbWUiOiJzaG9haWI0NCIsImV4cCI6MTU4NjUwMDc3MSwiZW1haWwiOiJzaG9haWI0NEB



